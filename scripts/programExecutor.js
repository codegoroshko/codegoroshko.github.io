import { CONFIG } from './config.js';
import { GameState } from './gameState.js';
import { GridRenderer } from './gridRenderer.js';
import { ModalManager } from './modalManager.js';
import { HapticFeedback } from './haptics.js';
import { Utils } from './utils.js';
import { LEVELS } from './levels.js';
import { LevelManager } from './levelManager.js';

export const ProgramExecutor = {
    async run() {
        if (GameState.isRunning) return;

        if (GameState.program.length === 0) {
            ModalManager.show('ü§î –ü—Ä–æ–≥—Ä–∞–º–∞ –ø–æ—Ä–æ–∂–Ω—è', '–î–æ–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏!', 'error');
            HapticFeedback.error();
            return;
        }

        const estimatedSteps = Utils.calculateTotalSteps(GameState.program);
        if (estimatedSteps >= CONFIG.MAX_EXECUTION_STEPS) {
            ModalManager.show('‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ', `–ü—Ä–æ–≥—Ä–∞–º–∞ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è –∑–∞ ${estimatedSteps} –∫—Ä–æ–∫—ñ–≤.\n\n–ú–∞–∫—Å–∏–º—É–º: ${CONFIG.MAX_EXECUTION_STEPS}`, 'error');
            HapticFeedback.error();
            return;
        }

        GameState.isRunning = true;
        ModalManager.hide();
        GameState.reset(false);
        GridRenderer.render();
        HapticFeedback.medium();

        // –û–ù–û–í–õ–ï–ù–û: –í–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ-—Å–∫—Ä–æ–ª —Ç—ñ–ª—å–∫–∏ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö (lg: < 1024px)
        if (window.innerWidth < 1024) {
            const gridContainer = document.querySelector('.grid-container');
            gridContainer?.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ª–∏—à–µ–Ω–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –±–ª–æ–∫ try...catch...finally
        try {
            await this.execute(GameState.program);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:', error);
            ModalManager.show('‚ùå –ü–æ–º–∏–ª–∫–∞', '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è', 'error');
            HapticFeedback.error();
        } finally {
            const wasRunning = GameState.isRunning;
            GameState.isRunning = false;
            this.checkWin(true, wasRunning);
        }
    },

    async execute(commandList) {
        for (const item of commandList) {
            if (!GameState.isRunning) return;

            GameState.executionStepCount++;
            if (GameState.executionStepCount > CONFIG.MAX_EXECUTION_STEPS) {
                ModalManager.show('‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç', '–ü—Ä–æ–≥—Ä–∞–º–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ', 'error');
                HapticFeedback.error();
                GameState.isRunning = false;
                return;
            }

            if (item.type === 'loop') {
                for (let i = 0; i < item.count; i++) {
                    if (!GameState.isRunning) return;
                    await this.execute(item.commands);
                }
            } else {
                if (GameState.currentStrength <= 0) {
                    ModalManager.show('üíÄ –ù–µ–º–∞—î —Å–∏–ª–∏', '–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è —Å–∏–ª–∞!\n\n–ó–±–∏—Ä–∞–π—Ç–µ –±–æ–Ω—É—Å–∏.', 'error');
                    HapticFeedback.error();
                    GameState.isRunning = false;
                    return;
                }

                await Utils.sleep(CONFIG.ANIMATION_DELAY);
                this.executeCommand(item.command);
                GridRenderer.render();
                HapticFeedback.light();
            }

            if (this.checkWin()) return;
        }
    },

    executeCommand(command) {
        const newPos = { ...GameState.heroPos };

        switch (command) {
            case 'up': newPos.y = Math.max(0, GameState.heroPos.y - 1); break;
            case 'down': newPos.y = Math.min(CONFIG.GRID_SIZE - 1, GameState.heroPos.y + 1); break;
            case 'left': newPos.x = Math.max(0, GameState.heroPos.x - 1); break;
            case 'right': newPos.x = Math.min(CONFIG.GRID_SIZE - 1, GameState.heroPos.x + 1); break;
            default: break;
        }

        if (GameState.isObstacle(newPos.x, newPos.y)) return;

        GameState.heroPos = newPos;
        GameState.currentStrength--;

        const itemKey = `${GameState.heroPos.x},${GameState.heroPos.y}`;
        if (!GameState.collectedItems.has(itemKey)) {
            const foundItem = GameState.items.find(item => item.x === GameState.heroPos.x && item.y === GameState.heroPos.y);
            if (foundItem?.type === 'strength') {
                GameState.currentStrength += foundItem.value;
            } else if (foundItem?.type === 'weapon') {
                GameState.currentWeapon += foundItem.value;
            } else {
                return;
            }

            GameState.collectedItems.add(itemKey);
            HapticFeedback.medium();
        }
    },

    checkWin(isFinalCheck = false, wasRunning = true) {
        if (GameState.heroPos.x === GameState.finishPos.x && GameState.heroPos.y === GameState.finishPos.y) {
            const hasEnoughStrength = GameState.currentStrength > GameState.monsterStrength;
            const hasEnoughWeapon = GameState.currentWeapon >= GameState.monsterDefense;

            if (hasEnoughStrength && hasEnoughWeapon) {
                GameState.completedLevels.add(GameState.currentLevel);
                HapticFeedback.success();

                const level = LEVELS[GameState.currentLevel];
                const totalSteps = Utils.calculateTotalSteps(GameState.program);
                let stars = '‚≠ê';
                if (level?.optimalSteps) {
                    if (totalSteps === level.optimalSteps) stars = '‚≠ê‚≠ê‚≠ê';
                    else if (totalSteps <= level.optimalSteps + 2) stars = '‚≠ê‚≠ê';
                }

                GameState.updateLevelUI(level);

                if (GameState.isTutorialMode) {
                    const nextPhase = GameState.currentLevel + 0.1;
                    if (nextPhase <= 0.5) {
                        ModalManager.show(
                            `üéâ –ß—É–¥–æ–≤–æ! ${stars}`,
                            `–í–∏ –ø—Ä–æ–π—à–ª–∏ —Ñ–∞–∑—É ${GameState.currentLevel}!\n\n–ö—Ä–æ–∫—ñ–≤: ${totalSteps}\n\n–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ñ–∞–∑–∏!`,
                            'success',
                            [
                                {
                                    text: '–î–∞–ª—ñ <i class="fa-solid fa-arrow-right ml-2"></i>',
                                    class: 'bg-green-500 hover:bg-green-600',
                                    action: () => {
                                        LevelManager.loadNext();
                                        ModalManager.hide();
                                    }
                                }
                            ]
                        );
                    } else {
                        GameState.completedLevels.add(0.5);
                        GameState.updateLevelUI(level);
                        ModalManager.show(
                            'üéì –¢—É—Ç–æ—Ä—ñ–∞–ª –ø—Ä–æ–π–¥–µ–Ω–æ!',
                            '–í—ñ—Ç–∞—î–º–æ! –¢–µ–ø–µ—Ä –≤–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤!\n\n–ü–æ—á–∏–Ω–∞—î–º–æ –†—ñ–≤–µ–Ω—å 1!',
                            'success',
                            [
                                {
                                    text: '–î–æ —Ä—ñ–≤–Ω—è 1! <i class="fa-solid fa-rocket ml-2"></i>',
                                    class: 'bg-indigo-500 hover:bg-indigo-600',
                                    action: () => {
                                        LevelManager.loadNext();
                                        ModalManager.hide();
                                    }
                                }
                            ]
                        );
                    }
                } else if (GameState.currentLevel < CONFIG.TOTAL_LEVELS) {
                    ModalManager.show(
                        `üéâ –ü–µ—Ä–µ–º–æ–≥–∞! ${stars}`,
                        `–†—ñ–≤–µ–Ω—å ${GameState.currentLevel} –ø—Ä–æ–π–¥–µ–Ω–æ!\n\n–ö—Ä–æ–∫—ñ–≤: ${totalSteps}${level?.optimalSteps ? `\n–û–ø—Ç–∏–º—É–º: ${level.optimalSteps}` : ''}`,
                        'success',
                        [
                            {
                                text: '–î–∞–ª—ñ <i class="fa-solid fa-arrow-right ml-2"></i>',
                                class: 'bg-green-500 hover:bg-green-600',
                                action: () => {
                                    LevelManager.loadNext();
                                    ModalManager.hide();
                                }
                            },
                            {
                                text: '–ü–æ–∫—Ä–∞—â–∏—Ç–∏ <i class="fa-solid fa-arrows-rotate ml-2"></i>',
                                class: 'bg-blue-500 hover:bg-blue-600',
                                action: () => {
                                    GameState.loadLevel(GameState.currentLevel);
                                    GridRenderer.render();
                                    ModalManager.hide();
                                }
                            }
                        ]
                    );
                } else {
                    ModalManager.show(
                        'üèÜ –í–°–ï –ü–†–û–ô–î–ï–ù–û!',
                        '–í—ñ—Ç–∞—î–º–æ! –í–∏ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ —Ä—ñ–≤–Ω—ñ!\n\n–í–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –º–∞–π—Å—Ç–µ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤! üéä',
                        'success'
                    );
                }
            } else {
                let errorMsg = '‚öîÔ∏è –ü—Ä–æ–≥—Ä–∞–ª–∏ –±—ñ–π!\n\n';
                if (!hasEnoughStrength) {
                    errorMsg += `üíî –°–∏–ª–∞: ${GameState.currentStrength} (—Ç—Ä–µ–±–∞ > ${GameState.monsterStrength})\n`;
                }
                if (!hasEnoughWeapon) {
                    errorMsg += `üó°Ô∏è –ó–±—Ä–æ—è: ${GameState.currentWeapon} (—Ç—Ä–µ–±–∞ >= ${GameState.monsterDefense})`;
                }
                errorMsg += '\n\n–ó–±–µ—Ä—ñ—Ç—å –±—ñ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å—ñ–≤!';

                ModalManager.show('üò¢ –ü–æ—Ä–∞–∑–∫–∞', errorMsg, 'error');
                HapticFeedback.error();
            }
            GameState.isRunning = false;
            return true;
        }

        if (isFinalCheck && wasRunning) {
            ModalManager.show('ü§î –•–º...', '–í–∏ –Ω–µ –¥—ñ—Å—Ç–∞–ª–∏—Å—è –º–æ–Ω—Å—Ç—Ä–∞!\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º.', 'error');
            HapticFeedback.error();
            return false;
        }
        return false;
    }
};

